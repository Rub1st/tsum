{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_CURRENT_MANAGER, GET_MANAGERS } from '../constants/managers';\nvar initialState = {\n  managers: [],\n  currentManager: {}\n};\n\nvar ManagerReducer = function ManagerReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_CURRENT_MANAGER:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          currentWorker: state.workers.find(function (el) {\n            return el.id === action.value;\n          })\n        });\n      }\n      ;\n\n    case GET_MANAGERS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          managers: action.value\n        });\n      }\n      ;\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default ManagerReducer;","map":{"version":3,"sources":["/home/akira/Desktop/tsum/app/javascript/main_redux/reducers/managers.js"],"names":["SET_CURRENT_MANAGER","GET_MANAGERS","initialState","managers","currentManager","ManagerReducer","state","action","type","currentWorker","workers","find","el","id","value"],"mappings":";;;;;;AAAA,SAASA,mBAAT,EAA8BC,YAA9B,QAAkD,uBAAlD;AAEA,IAAIC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,cAAc,EAAE;AAFG,CAAnB;;AAKA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACzD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,mBAAL;AAAyB;AACrB,+CAAYM,KAAZ;AAAmBG,UAAAA,aAAa,EAAEH,KAAK,CAACI,OAAN,CAAcC,IAAd,CAAmB,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAACC,EAAH,KAAUN,MAAM,CAACO,KAArB;AAAA,WAArB;AAAlC;AACH;AAAA;;AACD,SAAKb,YAAL;AAAkB;AACd,+CAAYK,KAAZ;AAAmBH,UAAAA,QAAQ,EAAEI,MAAM,CAACO;AAApC;AACH;AAAA;;AACD;AAAS;AACL,eAAOR,KAAP;AACH;AATL;AAWC,CAZD;;AAcA,eAAeD,cAAf","sourcesContent":["import { SET_CURRENT_MANAGER, GET_MANAGERS } from '../constants/managers';\n\nlet initialState = {\nmanagers: [],\ncurrentManager: {},\n}\n\nconst ManagerReducer = (state = initialState, action) => {\nswitch (action.type){\n    case SET_CURRENT_MANAGER:{\n        return { ...state, currentWorker: state.workers.find(el => el.id === action.value) }\n    };\n    case GET_MANAGERS:{\n        return { ...state, managers: action.value }\n    };\n    default: {\n        return state;\n    }\n}\n}\n\nexport default ManagerReducer\n"]},"metadata":{},"sourceType":"module"}