{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { INDEX_TABLE, SET_CURRENT_TABLE, SET_SEARCH_COUNT_PLACES, SET_SEARCH_STATUS, SET_SEARCH_TABLE_NUMBER } from '../constants/tables';\nvar initialState = {\n  tables: [],\n  currentTable: {},\n  searchCountPlaces: '',\n  searchStatus: 'all',\n  searchTableNumber: ''\n};\n\nvar TableReducer = function TableReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INDEX_TABLE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          tables: action.value\n        });\n      }\n\n    case SET_CURRENT_TABLE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          currentTable: action.value\n        });\n      }\n\n    case SET_SEARCH_COUNT_PLACES:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          searchCountPlaces: action.value\n        });\n      }\n\n    case SET_SEARCH_STATUS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          searchStatus: action.value\n        });\n      }\n\n    case SET_SEARCH_TABLE_NUMBER:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          searchTableNumber: action.value\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default TableReducer;","map":{"version":3,"sources":["/home/akira/Desktop/tsum/app/javascript/main_redux/reducers/tables.js"],"names":["INDEX_TABLE","SET_CURRENT_TABLE","SET_SEARCH_COUNT_PLACES","SET_SEARCH_STATUS","SET_SEARCH_TABLE_NUMBER","initialState","tables","currentTable","searchCountPlaces","searchStatus","searchTableNumber","TableReducer","state","action","type","value"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,iBAAtB,EAAyCC,uBAAzC,EAAkEC,iBAAlE,EAAqFC,uBAArF,QAAoH,qBAApH;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,YAAY,EAAE,EAFK;AAGnBC,EAAAA,iBAAiB,EAAE,EAHA;AAInBC,EAAAA,YAAY,EAAE,KAJK;AAKnBC,EAAAA,iBAAiB,EAAE;AALA,CAArB;;AAQA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,WAAL;AAAkB;AAChB,+CAAWY,KAAX;AAAkBN,UAAAA,MAAM,EAAEO,MAAM,CAACE;AAAjC;AACD;;AACD,SAAKd,iBAAL;AAAwB;AACtB,+CAAWW,KAAX;AAAkBL,UAAAA,YAAY,EAAEM,MAAM,CAACE;AAAvC;AACD;;AACD,SAAKb,uBAAL;AAA8B;AAC5B,+CAAWU,KAAX;AAAkBJ,UAAAA,iBAAiB,EAAEK,MAAM,CAACE;AAA5C;AACD;;AACD,SAAKZ,iBAAL;AAAwB;AACtB,+CAAWS,KAAX;AAAkBH,UAAAA,YAAY,EAAEI,MAAM,CAACE;AAAvC;AACD;;AACD,SAAKX,uBAAL;AAA8B;AAC5B,+CAAWQ,KAAX;AAAkBF,UAAAA,iBAAiB,EAAEG,MAAM,CAACE;AAA5C;AACD;;AACD;AAAQ;AACN,eAAOH,KAAP;AACD;AAlBH;AAoBD,CArBD;;AAuBA,eAAeD,YAAf","sourcesContent":["import { INDEX_TABLE, SET_CURRENT_TABLE, SET_SEARCH_COUNT_PLACES, SET_SEARCH_STATUS, SET_SEARCH_TABLE_NUMBER } from '../constants/tables'\n\nconst initialState = {\n  tables: [],\n  currentTable: {},\n  searchCountPlaces: '',\n  searchStatus: 'all',\n  searchTableNumber: '',\n}\n\nconst TableReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INDEX_TABLE: {\n      return {...state, tables: action.value}\n    }\n    case SET_CURRENT_TABLE: {\n      return {...state, currentTable: action.value}\n    }\n    case SET_SEARCH_COUNT_PLACES: {\n      return {...state, searchCountPlaces: action.value}\n    }\n    case SET_SEARCH_STATUS: {\n      return {...state, searchStatus: action.value}\n    }\n    case SET_SEARCH_TABLE_NUMBER: {\n      return {...state, searchTableNumber: action.value}\n    }\n    default:{\n      return state;\n    }\n  }\n}\n\nexport default TableReducer"]},"metadata":{},"sourceType":"module"}